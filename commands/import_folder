#!/bin/bash

## Define import_folder command

function import_folder::description() {
  cat <<EOT
Imports a folder into OMERO. Generates
Before_user_Imported.log and user_Imported.log
files and returns string confirming if import
was successful or not. Will skip Imported or
OldData folders.
EOT

}

function import_folder::usage() {
  cat <<EOT
  -p --password_file   mandatory   Full path to file containing 
                                   password for importer OMERO account
  -e --environment     mandatory   Full path to OMERO virtual environment
  -u --user            mandatory   OMERO (LDAP) user ID, where data will be 
                                   imported to
  -f --folder          mandatory   Folder of data to be imported
  -c --config          mandatory   config file containing server info
EOT
}

function import_folder::run() {
 # Check if password file is given
 local pass=$(readopt -p --password_file)
 if [ -z "${pass}" ]; then
   echo "ERROR: import_folder - no password file given with --password_file"
   exit 1
 fi
 
  # Check if environment path is given
 local env_dir=$(readopt -e --environment)
 if [ -z "${env_dir}" ]; then
   echo "ERROR: import_folder - no environment path given with --environment"
   exit 1
 fi
 
  # Check if user is given
 local user=$(readopt -u --user)
 if [ -z "${user}" ]; then
   echo "ERROR: import_folder - no user ID given with --user"
   exit 1
 fi
 
  # Check if folder to be imported is given
 local folder=$(readopt -f --folder)
 if [ -z "${folder}" ]; then
   echo "ERROR: import_folder - no folder of data given with --folder"
   exit 1
 fi
 
 # Check if config file is given
 local conf=$(readopt -c --config)
 if [ -z "${conf}" ]; then
   echo "ERROR: import_folder - no config file given with --config"
   exit 1
 fi
 
 ## Define variables
 
 local config_file=$(get_config_file "$conf")
 check_error $config_file
 
 local server port importer
 { 
   read -r server
   read -r port
   read -r importer
 } <<< $(get_config "$config_file")
 check_error $server
 check_error $port
 check_error $importer
 
 local pass_file=$(get_pass_file "$pass")
 check_error $pass_file
 
 local env=$(get_environment "$env_dir")
 check_error $env
 
 local data_folder=$(get_folder "$folder")
 check_error $data_folder
 
 local password=$(read_pass "$pass_file")
 check_error $password

 local result=$(import "$password" "$env" "$user" "$data_folder" "$server" "$port" "$importer")
 check_error $result
 # Print message if successful
 echo "$result"
}

# ===================================================================================

## Define functions

get_config_file() {
  local configuration=${1}
  if [ -f "$configuration" ]; then
    echo $configuration
  else
    echo "ERROR: $configuration does not exist"
    exit 1
  fi
}

get_config() {
  local cfgfile=${1}
  if [ -f "${cfgfile}" ]; then
    local server port importer
    { 
      read -r server
      read -r port
      read -r importer
    } <<< "$( bash OMEROimport read_config --file="$cfgfile")"
    echo $server
    echo $port
    echo $importer
  else
    echo "ERROR: $cfgfile does not exist"
	exit 1
  fi
}

# Check given password file is a file
get_pass_file() {
  local pass_file=${1}
  if [ -f "$pass_file" ]; then
    echo $pass_file
  else
    echo "ERROR: $pass_file does not exist"
    exit 1
  fi
}

# Get env directory
get_environment() {
  local env_dir=$(check_dir ${1})
  echo $env_dir
}

# Get folder - ignore Imported and OldData folders, these should never be imported
get_folder() {
  local folder=$(check_dir ${1})
  if [ $(basename "$folder") == "Imported" ] || [ $(basename "$folder") == "OldData" ] || [ $(basename "$folder") == "imported" ]; then
    echo "ERROR: "$folder" should not be imported"
    exit 1
  else
    echo $folder
  fi
}

# Read password from password file
read_pass() {
  local pass_file=${1}
  local password=$(cat "$pass_file")
  # Check if password empty
  if [ -z "${password}" ]; then
   echo "ERROR: $pass_file is empty"
   exit 1
  else
    echo $password
  fi
}

#Import data
import() {
  local password=${1}
  local environment=${2}
  local user=${3}
  local folder=${4}
  local server=${5}
  local port=${6}
  local importer=${7}
  clear_sess
  start_sess "$environment" "$password" "$importer" "$server"
  create_user "$environment" "$user"
  folder_name=$(basename "$folder")
  logname="$user"_imported
  #If log file exists create a new one, i.e. don't overwrite
  if [[ -e $logname.log || -L $logname.log ]] ; then
    i=0
    while [[ -e $logname-$i.log || -L $logname-$i.log ]] ; do
        let i++
    done
    logname=$logname-$i
fi
touch -- "$logname".log
  #Increase Java Heap size for imports
  export JAVA_OPTS=-Xmx4G
  #Check if there are any files to import
  if $environment/bin/omero import -f "$folder" &> Before_"$logname".log; then
    #Import target with same structure as directory
    $environment/bin/omero import "$folder" -T "regex:+name:^.*$folder_name/(?<Container1>.*?)" \
    -u "$user" --sudo $importer -s $server -p $port -w "$password" --skip upgrade --depth 7\
    &> "$logname".log
    echo "$logname".log
    $environment/bin/omero logout
  else
    echo "=== No files to import for $user\n"
    rm Before_"$logname".log
  fi
}

# Clear previous sessions
clear_sess() {
 # Open additional file descriptor to pipe output to variable
 "$environment"/bin/omero sessions clear &> /tmp/om_imp
 local clear_res=$(cat /tmp/om_imp)
 if [ $? -ne 0 ]; then
   echo "ERROR: Session clear failed:\n $clear_res\n"
   exit 1 
 fi
}


# Check directory exists
check_dir() {
  local dir=${1}
  if [ -d $dir ]; then
    echo $dir
  else
    echo "ERROR: $dir directory does not exist"
    exit 1
  fi
}

# Connect to omero as importer
start_sess(){
 local path=${1}
 local password=${2}
 local importer=${3}
 local server=${4}
 "$path"/bin/omero login -s "$server" -u "$importer" -w "$password" &> /tmp/om_imp
 local error_code=$?
 local login_res=$(cat /tmp/om_imp)
 if [ $error_code -ne 0 ]; then
   printf "ERROR: Failed to connect to OMERO:\n $login_res\n in import_folder"
   exit 1
 fi
}

# Create new user
create_user(){
 "${1}"/bin/omero ldap create "${2}" > /tmp/om_imp 2>&1
 local error_code=$?
 local create_res=$(cat /tmp/om_imp)
 if [ $error_code -ne 0 ] && [ $error_code -ne 132 ]; then
   printf "ERROR: Failed to create new OMERO user:\n $create_res\n in import_folder"
   exit 1
 fi
}

# Check for errors - all error messages start with ERROR:
# If doing multiple levels of functions, send to error file and then parse file at end
check_error() {
  local msg="$*"
  # regex matching at beginning of a string. If removing ERROR from the beginning
  # causes msg varibale to change then return as error
  if [ "${msg//ERROR/}" != "${msg}" ]; then
    echo "${msg}"
    exit 1
  fi
}
